---
name: Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write
  statuses: write

concurrency:
  group: |
    '${{ github.workflow }}-${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: false

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Image Ref
        id: image-vars
        run: |
          echo "IMAGE_REF=$(task image-ref)" >> $GITHUB_ENV
          echo "REGISTRY=$(task image-registry)" >> $GITHUB_ENV
          echo "REPOSITORY=$(task image-repository)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: testing.Dockerfile
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ env.IMAGE_REF }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:buildcache,mode=max,image-manifest=true,oci-mediatypes=true
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:buildcache,mode=max,image-manifest=true,oci-mediatypes=true

      - name: Task Test
        run: "docker pull ${{ env.IMAGE_REF }} && task docker-no-build-test"

      # - name: Task Test
      #   run: "task docker-test"
